generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String        @unique
  pass_hash    String
  birthdate    DateTime
  avatar       String?
  posts        Post[]
  comments     Comment[]
  boards       BoardMember[]
  createdAt    DateTime      @default(now())
  tags         Tag[]
  votes        PostVote[]
  commentVotes CommentVote[]
}

model BoardMember {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  role      Int      @default(0)

  @@id([userId, boardId])
}

model Board {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  posts       Post[]
  members     BoardMember[]
}

model PostVote {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  value     Int      @default(0)

  @@id([postId, userId])
}

model Post {
  id         String     @id @default(cuid())
  content    String
  attachment String?
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  comments   Comment[]
  boardId    Int
  board      Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  votes      PostVote[]
}

model CommentVote {
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  value     Int      @default(0)

  @@id([commentId, userId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  postId    String
  level     Int           @default(0)
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  votes     CommentVote[]
}
